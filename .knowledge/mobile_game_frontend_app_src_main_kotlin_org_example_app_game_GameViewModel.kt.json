{"is_source_file": true, "format": "Kotlin", "description": "Defines the GameViewModel class which manages game state, handles level configuration, and interfaces with game logic components such as BoardFactory and TurnEngine. It exposes functions for starting new games and attempting swaps, and supports UI data binding via StateFlow.", "external_files": ["org/example/app/game/core/BoardFactory.kt", "org/example/app/game/core/GameState.kt", "org/example/app/game/core/LevelConfig.kt", "org/example/app/game/core/TurnEngine.kt", "androidx.lifecycle.ViewModel.kt", "kotlinx.coroutines.flow.MutableStateFlow.kt", "kotlinx.coroutines.flow.StateFlow.kt", "kotlinx.coroutines.launch.kt"], "external_methods": ["BoardFactory.createInitialGrid", "TurnEngine.performSwap"], "published": ["uiState", "newGame", "trySwap"], "classes": [{"name": "GameViewModel", "description": "A ViewModel managing the game state, providing functions for game initialization and actions, equipped with coroutine support for asynchronous operations."}], "methods": [{"name": "uiState", "description": "Returns a StateFlow emitting the latest GameState for UI consumption."}, {"name": "newGame", "description": "Starts a new game with the given level configuration, resetting the game state."}, {"name": "trySwap", "description": "Attempts a swap action between two positions, updating the game state if valid."}], "calls": ["BoardFactory.createInitialGrid", "TurnEngine.performSwap", "viewModelScope.launch"], "search-terms": ["GameViewModel", "trySwap", "newGame", "StateFlow", "LevelConfig", "BoardFactory", "TurnEngine", "uiState", "game state management"], "state": 2, "file_id": 25, "knowledge_revision": 110, "git_revision": "", "hash": "8c48c58f40582e7c9be325b979c3794e", "format-version": 4, "code-base-name": "mobile_game_frontend", "filename": "mobile_game_frontend/app/src/main/kotlin/org/example/app/game/GameViewModel.kt", "revision_history": [{"110": ""}]}