{"is_source_file": true, "format": "Kotlin", "description": "Core match-3 game logic and data models, including tile definitions, grid management, match detection, swap validation, cascading, refilling, scoring, level configuration, game state management, and turn resolution.", "external_files": [], "external_methods": [], "published": ["TileType", "Cell", "Grid", "MatchFinder", "SwapValidator", "CascadeEngine", "RefillEngine", "ScoreEngine", "LevelConfig", "GameState", "BoardFactory", "TurnEngine"], "classes": [{"name": "TileType", "description": "Enum of basic tile colors/types with utility methods."}, {"name": "Cell", "description": "Data class representing a board cell with row, column, and tile type."}, {"name": "Grid", "description": "Represents the game board grid capable of read/write operations, swaps, and bounds checking."}, {"name": "MatchFinder", "description": "Object containing logic to find all horizontally and vertically aligned matches of length >= 3."}, {"name": "SwapValidator", "description": "Object for validating whether a swap is legal and results in at least one match."}, {"name": "CascadeEngine", "description": "Object that applies gravity to collapse matched tiles downward."}, {"name": "RefillEngine", "description": "Object that refills empty grid cells with new random tiles, attempting to prevent immediate matches."}, {"name": "ScoreEngine", "description": "Object providing scoring rules based on match size and cascade chains."}, {"name": "LevelConfig", "description": "Data class encapsulating level parameters such as grid size, allowed tile types, target score, and move limit."}, {"name": "GameState", "description": "Immutable snapshot of the current game state, including grid, score, moves, and status flags."}, {"name": "BoardFactory", "description": "Helper object to create initial game boards avoiding pre-existing matches."}, {"name": "TurnEngine", "description": "Main engine to perform a move: validate, swap, resolve matches, cascades, refill, and update game state."}], "methods": [{"name": "findAll", "description": "Finds all matches of length >= 3 on the grid."}, {"name": "isValidSwap", "description": "Checks if swapping two adjacent cells will result in a match."}, {"name": "applyGravity", "description": "Applies gravity to collapse cells downward after matches are cleared."}, {"name": "refillRandom", "description": "Refills empty grid cells with random tiles, avoiding immediate match creation."}, {"name": "scoreForMatch", "description": "Calculates score for a match of a given size and cascade chain index."}, {"name": "createInitialGrid", "description": "Creates a starting grid avoiding initial matches."}, {"name": "performSwap", "description": "Performs a swap and resolves cascades, updating the game state accordingly."}], "calls": ["MatchFinder.findAll", "SwapValidator.isValidSwap", "CascadeEngine.applyGravity", "RefillEngine.refillRandom", "ScoreEngine.scoreForMatch"], "search-terms": ["Match3Core", "TileType", "Grid", "MatchFinder", "SwapValidator", "CascadeEngine", "RefillEngine", "ScoreEngine", "LevelConfig", "GameState", "TurnEngine", "core logic", "match-3", "game board", "refill", "scoring", "level configuration"], "state": 2, "file_id": 24, "knowledge_revision": 108, "git_revision": "", "hash": "ca6774436fe274a8418bc3c222ebbb11", "format-version": 4, "code-base-name": "mobile_game_frontend", "filename": "mobile_game_frontend/app/src/main/kotlin/org/example/app/game/core/Match3Core.kt", "revision_history": [{"108": ""}]}